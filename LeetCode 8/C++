class Solution {
public:
    int myAtoi(string s) {
        
        int i,a=1,c=0,l;      //i处理锚点    a正负判断   c目标值   l字符串长度
        l=s.length();
         for(i=0;s[i]==' '&&i<l;i++)    //处理前置空格
         ;
         if(s[i]=='-'&&i<l)             //处理正负符号
         {
             a=-1;
             i++;
         }
         else if(s[i]=='+'&&i<l)
         {
             a=1;
             i++;
         }
         
         for(;i<l&&s[i]=='0';i++);    //处理前置 0
         if(s[i]>='0'&&s[i]<='9'&&i<l)    //单独对s[i]处理一次
         {
             c=s[i]-48;
             i++;
         }
         while(s[i]>='0'&&s[i]<='9'&&i<l)    //循环处理
         { 
             if(c>=214748364)
              {
                  if(c==214748364)          //相等时是否满足溢出条件
                  {
                      if(a>0&&s[i]-48>6)  
                          return 2147483647;
                      if(a<0&&s[i]-48>7)
                          return -2147483648;
                  }
                  else                      //不相等必定溢出
                  {
                      if(a>0)  
                          return 2147483647;
                      if(a<0)
                          return -2147483648;
                  }
            
              }
            c=c*10-48+s[i];               //数据乘后不溢出，计算完毕后进入下一个循环
            i++;
         }
    
    return c*a;
    }
};
